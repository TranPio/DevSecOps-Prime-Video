pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    parameters {
        string(name: 'action', defaultValue: 'apply', description: 'terraform action: apply or destroy')
    }

    stages {
        stage('Checkout from Git') {                        
            steps {
                git branch: 'main', url: 'https://github.com/TranPio/devsecops-prime-video.git'
            }
        }

        stage('terraform version') {
            steps {
                sh 'terraform --version'
            }
        }

        stage('terraform init') {
            steps {
                dir('terraform') {
                    sh '''
                    terraform init \
                    -backend-config="access_key=$AWS_ACCESS_KEY_ID" \
                    -backend-config="secret_key=$AWS_SECRET_ACCESS_KEY"
                    '''
                }
            }
        }

        stage('terraform validate') {
            steps {
                dir('terraform') {
                    sh 'terraform validate'
                }
            }
        }

        stage('terraform plan') {
            steps {
                dir('terraform') {
                    sh '''
                    terraform plan \
                    -var="access_key=$AWS_ACCESS_KEY_ID" \
                    -var="secret_key=$AWS_SECRET_ACCESS_KEY"
                    '''
                }
            }
        }

        stage('terraform apply/destroy') {
            steps {
                dir('terraform') {
                    sh '''
                    terraform ${action} --auto-approve \
                    -var="access_key=$AWS_ACCESS_KEY_ID" \
                    -var="secret_key=$AWS_SECRET_ACCESS_KEY"
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        echo "Building Docker image..."
                        sh "docker build -t devsecops-prime-video ."
                        sh "docker tag devsecops-prime-video piotran/devsecops-prime-video:latest"
                        sh "docker push piotran/devsecops-prime-video:latest"
                    }
                }
            }
        }

        stage('Deploy to EKS Cluster') {
            steps {
                dir('kubernetes') {
                    script {
                        echo "Verifying AWS credentials..."
                        sh 'aws sts get-caller-identity'

                        echo "Configuring kubectl for EKS cluster..."
                        sh 'aws eks update-kubeconfig --region ap-northeast-1 --name TranHoaiPhu2'

                        echo "Verifying kubeconfig..."
                        sh 'kubectl config view'

                        echo "Deploying application to EKS..."
                        sh 'kubectl apply -f manifest.yml'

                        echo "Verifying deployment..."
                        sh 'kubectl get pods -n devsecops-prime-video-namespace'
                        sh 'kubectl get svc -n devsecops-prime-video-namespace'
                    }
                }
            }
        }
    }

    post {
        success {
            echo '✅ terraform execution completed successfully!'
        }
        failure {
            echo '❌ terraform execution failed! Check the logs.'
        }
    }
}
